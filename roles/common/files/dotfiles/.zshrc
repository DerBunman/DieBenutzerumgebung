# =====================================
# << THIS FILE IS MANAGED BY ANSIBLE >>
# =====================================
#
# DO NOT EDIT THIS FILE - CHANGES WILL BE OVERWRITTEN
# INSTEAD CHANGE THIS FILE IN THE ANSIBLE REPOSITORY.

#zmodload zsh/zprof

# overwrite compinit if we use sudo so we wont
# get the compaudit messages
if [ $UID -eq 0 ]; then
	autoload -U compinit
	compinit -i -u -d ~/.zplug/zcompdump
	compinit() {
		notify-send compinit -- "$*"
	}
fi

## supresses these dbus warnings
# http://computing.help.inf.ed.ac.uk/accessibility-bus
export NO_AT_BRIDGE=1

#   _     _     _
#  | |__ (_)___| |_ ___  _ __ _   _
#  | '_ \| / __| __/ _ \| '__| | | |
#  | | | | \__ \ || (_) | |  | |_| |
#  |_| |_|_|___/\__\___/|_|   \__, |
#                             |___/
# size and location
SAVEHIST=10000
HISTSIZE=10000
HISTFILE=~/.zsh_history

# Report command running time if it is more than 3 seconds
REPORTTIME=3

#            _              _
#   ___  ___| |_ ___  _ __ | |_ ___
#  / __|/ _ \ __/ _ \| '_ \| __/ __|
#  \__ \  __/ || (_) | |_) | |_\__ \
#  |___/\___|\__\___/| .__/ \__|___/
#                    |_|

# prevent > redirection from truncating the given file if it already exists
# use >! or >>! to force
setopt NOCLOBBER

# Do not print the directory stack after pushd or popd. 
setopt PUSHD_SILENT

# Add commands to history as they are entered, don't wait for shell to exit
setopt INC_APPEND_HISTORY

# Also remember command start time and duration
setopt EXTENDED_HISTORY

# Do not keep duplicate commands in history
setopt HIST_IGNORE_ALL_DUPS

# Do not remember commands that start with a whitespace
setopt HIST_IGNORE_SPACE

# remove superfluous blanks from history items
setopt HIST_REDUCE_BLANKS

# allow comments in interactive shells
setopt INTERACTIVE_COMMENTS

# Correct spelling of all arguments in the command line
#setopt CORRECT_ALL
# autodir/cd tools
setopt AUTOCD AUTOPUSHD PUSHDIGNOREDUPS

# Whenever a command completion or spelling correction is attempted,
# make sure the entire command path is hashed first. This makes the first
# completion slower but avoids false reports of spelling errors.
setopt HASH_LIST_ALL

#               _                                  _      _
#    __ _ _   _| |_ ___   ___ ___  _ __ ___  _ __ | | ___| |_ ___
#   / _` | | | | __/ _ \ / __/ _ \| '_ ` _ \| '_ \| |/ _ \ __/ _ \
#  | (_| | |_| | || (_) | (_| (_) | | | | | | |_) | |  __/ ||  __/
#   \__,_|\__,_|\__\___/ \___\___/|_| |_| |_| .__/|_|\___|\__\___|
#                                           |_|
zstyle ':completion:*' menu select
# Enable autocompletion
zstyle ':completion:*' completer _complete _correct _approximate

# use cache
test -d .zsh/cache || mkdir -p ~/.zsh/cache
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# Fuzzy matching of completions for when you mistype them:
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# Ignore completion functions for commands you donâ€™t have:
zstyle ':completion:*:functions' ignored-patterns '_*'

#             _
#   _____ __ | |_   _  __ _
#  |_  / '_ \| | | | |/ _` |
#   / /| |_) | | |_| | (_| |
#  /___| .__/|_|\__,_|\__, |
#      |_|            |___/

# Check if zplug is installed
if [[ ! -d ~/.zplug ]]; then
	git clone https://github.com/zplug/zplug ~/.zplug
	source ~/.zplug/init.zsh && zplug update
fi

fpath=(~/.zsh_autocomplete $fpath)

source ~/.zplug/init.zsh

# Make sure to use double quotes
zplug 'DerBunman/zplug', hook-build:'zplug --self-manage'
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-history-substring-search"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-syntax-highlighting"

# Disable updates using the "frozen" tag
zplug "k4rthik/git-cal", as:command
zplug "plugins/colorize", from:oh-my-zsh
zplug "zlsun/solarized-man"
zplug "horosgrisa/mysql-colorize", use:"mysql-colorize.plugin.zsh"
zplug "plugins/history", from:oh-my-zsh
zplug "plugins/tmux", from:oh-my-zsh
zplug "plugins/systemd", from:oh-my-zsh
zplug "plugins/docker", from:oh-my-zsh
zplug "zpm-zsh/ssh"
zplug "zpm-zsh/colors"
zplug "joel-porquet/zsh-dircolors-solarized", use:"zsh-dircolors-solarized.plugin.zsh"
zplug "jreese/zsh-titles"

zplug "plugins/ssh-agent", from:oh-my-zsh
zstyle :omz:plugins:ssh-agent agent-forwarding on

zplug "marzocchi/zsh-notify"
zstyle ':notify:*' error-title "Command failed (in #{time_elapsed} seconds)"
zstyle ':notify:*' success-title "Command finished (in #{time_elapsed} seconds)"
# the icons have to be a real path, not some symlink or shit like that
zstyle ':notify:*' error-icon "$HOME/.repos/dotfiles/data/icons/status/dialog-error.png"
zstyle ':notify:*' success-icon "$HOME/.repos/dotfiles/data/icons/status/dialog-info.png"


# manage local plugins
[ -d ~/.zplug_local ] || mkdir ~/.zplug_local
#zplug "~/.zplug_local", \
#	from:local, \
#	use:"./solarized-powerline/solarized-powerline.zsh-theme", \
#	as:theme

#zplug "bhilburn/powerlevel9k", use:powerlevel9k.zsh-theme, at:next
zplug "romkatv/powerlevel10k", use:powerlevel10k.zsh-theme

POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(root_indicator ssh dir_writable virtualenv context dir vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time background_jobs vi_mode)

POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND="white"
#POWERLEVEL9K_MODE='awesome-fontconfig'
POWERLEVEL9K_MODE='nerdfont-complete'

POWERLEVEL9K_VI_MODE_INSERT_STRING=""
POWERLEVEL9K_VI_MODE_NORMAL_STRING="\ue62b "
POWERLEVEL9K_VI_MODE_NORMAL_FOREGROUND='yellow'

#POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
#POWERLEVEL9K_SHORTEN_DELIMITER="*"
#POWERLEVEL9K_SHORTEN_STRATEGY="truncate_to_unique"

POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
POWERLEVEL9K_SHORTEN_DELIMITER=""
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_to_unique"
POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=1
POWERLEVEL9K_DIR_ANCHOR_BOLD=true

#  If set, used to give the indentation between the right hand side of the right prompt in the line editor 
#  as given by RPS1 or RPROMPT and the right hand side of the screen. If not set, the value 1 is used.
ZLE_RPROMPT_INDENT=0

# Install plugins if there are plugins that have not been installed
if [ "$ASSUME_YES" = true ]; then
	zplug update
	zplug install
elif ! zplug check --verbose; then
	printf "Install? [y/N]: "
	if read -q; then
		echo; zplug install
	fi
fi

zplug load #--verbose

#               _        _                 _           _                   _
#    __ _ _   _| |_ ___ | | ___   __ _  __| |  _______| |__  _ __ ___   __| |
#   / _` | | | | __/ _ \| |/ _ \ / _` |/ _` | |_  / __| '_ \| '__/ __| / _` |
#  | (_| | |_| | || (_) | | (_) | (_| | (_| |  / /\__ \ | | | | | (__ | (_| |
#   \__,_|\__,_|\__\___/|_|\___/ \__,_|\__,_| /___|___/_| |_|_|  \___(_)__,_|
# all .zsh files in ~/.zshrc.d will be executed
[[ -d ~/.zshrc.d ]] && for file in ~/.zshrc.d/*zsh; do
	source "${file}"
done


#               _        _                 _
#    __ _ _   _| |_ ___ | | ___   __ _  __| |
#   / _` | | | | __/ _ \| |/ _ \ / _` |/ _` |
#  | (_| | |_| | || (_) | | (_) | (_| | (_| |
#   \__,_|\__,_|\__\___/|_|\___/ \__,_|\__,_|
#
autoload -U colors vcs_info
colors


#         _   __  __           _
#  __   _(_) |  \/  | ___   __| | ___
#  \ \ / / | | |\/| |/ _ \ / _` |/ _ \
#   \ V /| | | |  | | (_) | (_| |  __/
#    \_/ |_| |_|  |_|\___/ \__,_|\___|
# enable vi mode
bindkey -v

## unbind escape ...
bindkey -r '\e'

## ... bind to jj ...
bindkey jj vi-cmd-mode

## change keytimeout to 20 ms
export KEYTIMEOUT=20

## Better searching in command mode
bindkey -M vicmd '?' history-incremental-search-backward
bindkey -M vicmd '/' history-incremental-search-forward
bindkey -M vicmd "k" up-line-or-beginning-search
bindkey -M vicmd "j" down-line-or-beginning-search
bindkey -M vicmd "k" up-line-or-beginning-search
bindkey -M vicmd "j" down-line-or-beginning-search

#   _                   _        __  _
#  (_)_ __  _ __  _   _| |_     / / | | _____ _   _ ___
#  | | '_ \| '_ \| | | | __|   / /  | |/ / _ \ | | / __|
#  | | | | | |_) | |_| | |_   / /   |   <  __/ |_| \__ \
#  |_|_| |_| .__/ \__,_|\__| /_/    |_|\_\___|\__, |___/

zle -N zle-line-init
zle -N zle-keymap-select

# these are for backward-kill-word
backward-kill-dir () {
	#WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
	local WORDCHARS=${WORDCHARS/\/}
	zle backward-kill-word
}
zle -N backward-kill-dir
# e^? = esc (then release esc) backspace
bindkey '\e^?' backward-kill-dir
# ^H = ctrl-backspace
bindkey '^H' backward-kill-dir

# home and end
bindkey  "^[[H" beginning-of-line
bindkey  "^[[F" end-of-line

# and ctrl-a/ctrl-e
bindkey  "^a" beginning-of-line
bindkey  "^e" end-of-line

# ctrl left/right
# urxvt/rxvt-unicode (and maybe others):
bindkey "^[Od" backward-word
bindkey "^[Oc" forward-word
# terminator, konsole and xterm (and maybe others):
bindkey "^[[1;5D" backward-word
bindkey "^[[1;5C" forward-word


# edit commandline in vim
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line
bindkey "^v" edit-command-line

# used by vim-companion
bindkey '^P' up-history
bindkey '^N' down-history

#   _     _     _
#  | |__ (_)___| |_ ___  _ __ _   _
#  | '_ \| / __| __/ _ \| '__| | | |
#  | | | | \__ \ || (_) | |  | |_| |
#  |_| |_|_|___/\__\___/|_|   \__, |
#                             |___/
bindkey '^r' history-incremental-search-backward
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down


#    __ _____ __
#   / _|__  // _|
#  | |_  / /| |_
#  |  _|/ /_|  _|
#  |_| /____|_|
#
# Check if fzf is installed
if [[ ! -d ~/.fzf ]]; then
	git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
	~/.fzf/install --all
fi
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

