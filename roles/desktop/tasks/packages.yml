---
- name: 'Install desktop packages'
  block:
    - name: 'Install mandatory desktop packages'
      package:
        name: '{{ desktop__mandatory_packages }}'
        state: present

    - name: 'Install optional desktop packages'
      package:
        name: '{{ desktop__default_packages }}'
        state: present

    - name: 'Install additional user defined packages'
      package:
        name: '{{ desktop__additional_packages }}'
        state: present
      when: 'desktop__additional_packages is defined'

    - name: "Checking oomox installation status"
      shell: dpkg-query --showformat='dpkg --compare-versions "${Version}" "ge" "1.11"' -W oomox | sh
      register: oomox_status
      ignore_errors: true

    - name: "Install oomox"
      block:
      - name: "Install oomox for anything that is not Ubuntu 18.04"
        apt:
          deb: https://github.com/themix-project/oomox/releases/download/1.12.5/oomox_1.12.5_18.10+.deb
        when: "ansible_distribution_version != '18.04'"

      - name: "Install oomox for Ubuntu 18.04"
        apt:
          deb: https://github.com/themix-project/oomox/releases/download/1.12.5/oomox_1.12.5_17.04+.deb
        when: "ansible_distribution_version == '18.04'"

      when: 'oomox_status.rc != 0 or "no packages found" in oomox_status.stderr'

  when: 'ansible_become == True'

# the following tasks are to ensure that the needed packages are installed,
# when we are running in non root mode.
- name: 'Check default desktop packages'
  block:
    - name: 'Remove old tempfile'
      file:
        path: /tmp/ansible_check_pkg
        state: absent
      changed_when: false

    - name: 'Check install status'
      raw: >
        for pkg in {{ desktop__default_packages|join(" ")}};
          do dpkg -l $pkg | grep "^ii" || echo $pkg >> /tmp/ansible_check_pkg;
        done >/dev/null 2>&1;
        if [ -f /tmp/ansible_check_pkg ]; then echo $(cat /tmp/ansible_check_pkg); fi
      register: pkg_status
      changed_when: false

    - name: 'The following packages need to be installed: "{{ pkg_status.stdout }}" to skip this check set ignore_packages = True'
      fail:
        msg: '{{ pkg_status.stdout }}'
      when: 'pkg_status.stdout != ""'

  when: 'ansible_become == False and ignore_packages is not defined or ignore_packages == False'

# the following tasks are to ensure that the needed packages are installed,
# when we are running in non root mode.
- name: 'Check mandatory desktop packages'
  block:
    - name: 'Remove old tempfile'
      file:
        path: /tmp/ansible_check_pkg
        state: absent
      changed_when: false

    - name: 'Check install status'
      raw: >
        for pkg in {{ desktop__mandatory_packages|join(" ")}};
          do dpkg -l $pkg | grep "^ii" || echo $pkg >> /tmp/ansible_check_pkg;
        done >/dev/null 2>&1;
        if [ -f /tmp/ansible_check_pkg ]; then echo $(cat /tmp/ansible_check_pkg); fi
      register: pkg_status
      changed_when: false

    - name: 'The following packages need to be installed: "{{ pkg_status.stdout }}" ask your administrator to instal them.'
      fail:
        msg: '{{ pkg_status.stdout }}'
      when: 'pkg_status.stdout != ""'

  when: 'ansible_become == False'
