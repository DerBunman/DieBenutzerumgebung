#!/usr/bin/env zsh

# change working directory to script home
script_path=$0:A # :A follows symlinks
cd ${script_path:h} # h dirname

# include lib files
. lib/conf.zsh
. lib/colorized_messages.zsh

print -P "%B%F{cyan}" # bold font in cyan
cat << "EOF"
     _       _    __ _ _
  __| | ___ | |_ / _(_) | ___  ___
 / _` |/ _ \| __| |_| | |/ _ \/ __|
| (_| | (_) | |_|  _| | |  __/\__ \
 \__,_|\___/ \__|_| |_|_|\___||___/

EOF
print -P "%b%f" # reset font and color

action=${1:-unset}

if [ "$action" = "update" ]; then
	#            _  __                   _       _
	#   ___  ___| |/ _|  _   _ _ __   __| | __ _| |_ ___
	#  / __|/ _ \ | |_  | | | | '_ \ / _` |/ _` | __/ _ \
	#  \__ \  __/ |  _| | |_| | |_) | (_| | (_| | ||  __/
	#  |___/\___|_|_|    \__,_| .__/ \__,_|\__,_|\__\___|
	#                         |_|
	msg_info "performing self update via git"
	md5hash="$(md5sum "${script_path}")"
	git pull --recurse-submodules || {
		msg_error "could not self update"
		exit 1
	}


	[ "$(md5sum "${script_path}")" != "${md5hash}" ] && {
		msg_info "${script_path} itself has has been updated."
		msg_info "restarting."
		exec ${script_path} "$@"
		exit $?
	}

	exec ${script_path} dfp update

fi

#                       _       _
#   _ __ ___   ___   __| |_   _| | ___  ___
#  | '_ ` _ \ / _ \ / _` | | | | |/ _ \/ __|
#  | | | | | | (_) | (_| | |_| | |  __/\__ \
#  |_| |_| |_|\___/ \__,_|\__,_|_|\___||___/
# wrapper for modules like the config store and the
# configure dialog
[ -f "${script_path:h}/modules/${action}.zsh" ] && {
	shift
	"${script_path:h}/modules/${action}.zsh" "$@"
	exit $?
}

cat <<EOF

No action selected.
Please choose from the following list:

Setup dotfiles:
===============
  setup what to install and how everything should behave
  $ dotfiles setup

Update dotfiles and DFP packages:
=================================
  this command will update the sources and then perform an
  update of all dfp packages
  $ dotfiles update

DFP (dotfiles package) Manager:
===============================
  get a list of possible dfp commands:
  $ dotfiles dfp

Conf storage:
=============
  internal config storage used by DieBenutzerumgebung
  get a list of possible conf commands:
  $ dotfiles conf

EOF
